@page "/"
@inject NavigationManager NavManager

@using System.Text.Json;
@using System.Media;

@using MessageType = Lib.MessageType;
@using Plugin.Maui.Audio;
@using TDList = Lib.TDList;


<h1>Lists</h1>

<h3>Here you can see your ToDo lists :)</h3>

<div id="lists" class="clearfix">
    <!-- Here will be displayed all lists -->
    @foreach (TDList TDList in @readLists())
    {
        <div class="@TDListClassesGenerator(TDList.description, TDList.favourite)" @onclick="() => TDListClick(TDList.id, TDList.name)" @onmouseover="playTDListHoverSound">
            <div class="TDListHeader">
                @*<i class="gg-trash"></i>*@
                <i class="fa fa-trash-o" @onclick="() => deleteTDList(TDList.name)"></i>
                <h2>@TDList.name</h2>
                <span class="@generateStarFavouriteClasses(TDList.favourite)" @onclick="() => configChange(TDList.name, !TDList.favourite, TDList.pinned)"></span>
                <img src="@generateStarPinnedSrc(TDList.pinned)" alt="@generateStarPinnedSrc(TDList.pinned)" @onclick="() => configChange(TDList.name, TDList.favourite, !TDList.pinned)">
            </div>
            
            <h4 class="description">@TDList.description</h4>

            @*<h4 class="description">
                @TDList.description
                <audio autoplay controls><source src="/images/test.mp3" /></audio>
            </h4>*@
        </div>
    }
</div>

<div id="deletePopUp">
    <form>
        <h1>Are you sure you want to delete "@deleteTDListName" ToDo list?</h1>
        <h2>You can not go back after proceding!</h2>
        <label for="understandTheDeletion">I understand</label>
        <input id="understandTheDeletion" name="understandTheDeletion" type="checkbox" @bind="understandTheDeletion" /><p>YOU NEED TO CHECK THE BOX TO DELEATE THIS TDLIST</p><br />
        <button @onclick="deleteTDListGoBack">Go back</button>
        <button @onclick="deleteTDListProceed">Proceed</button>
    </form>
</div>


<style>
    /* Dynamic content CSS */
    * {
        overflow: hidden;
    }
    
    .clearfix::after {
        content: "";
        clear: both;
        display: table;
    }

    #lists {
        border: 3px dotted black;
        padding: 16px;
        overflow-y: scroll;
        box-shadow: inset 0px 0px 16px;
        max-height: calc(75vh - 128px);
    }

    .TDList {
        float: left;
        padding: 14px;
        margin: 8px;
        background-color: rgba(122, 132, 166, 0.6);
        border: 5px solid rgba(122, 132, 166, 0.15);
        backdrop-filter: blur(5px);
        border-radius: 10px;
        font-size: 0.45em;
        --height: calc(3vh + 105px);
        --width: calc(3vw + 250px);
        width: var(--width);
        height: var(--height);
        transition: height 0.1s ease-out, background-color 0.1s;
    }

    .favourite {
        background-color: rgba(146, 139, 146, 0.65);
        border: 5px solid rgba(255, 220, 5, 0.3);
    }

    .TDListHeader > span:hover, .TDListHeader > img:hover {
        filter: drop-shadow(0px 0px 2px) opacity(95%) brightness(110%);
    }

    .TDList:hover {
        background-color: rgba(114, 122, 148, 0.75);
        border: 5px solid rgba(114, 122, 148, 0.3);
        
        /*transform: scale(2); // ToDo*/
    }

    .favourite:hover {
        background-color: rgba(146, 139, 146, 0.8);
        border: 5px solid rgba(245, 210, 0, 0.45);
    }
    
    .fa {
        font-size: 20px;
    }

    .description {
        display: none;
        font-family: monospace, monospace;
        font-size: 2.3em;
        filter: blur(10px);
        /*-webkit-transition: 1s -webkit-filter linear;
            -moz-transition: 1s -moz-filter linear;
            -moz-transition: 1s filter linear;
            -ms-transition: 1s -ms-filter linear;
            -o-transition: 1s -o-filter linear;
            transition: 1s filter linear, 1s -webkit-filter linear;*/
        /*transition: all 2s;*/

        -moz-filter: blur(30px);
        filter: url(#blur);
        filter: blur(30px);
        -webkit-transition: 2s -webkit-filter linear;
        -o-transition: 2s filter linear;
    }


    #deletePopUp {
        display: @deletePopUpVisibility;

        position: absolute;
        z-index: 10;
        top: 0;
        left: 0;
        width: 100vw;
        height: 100vh;

        align-content: center;
        align-items: center;
        align-self: center;
        justify-content: center;
        justify-items: center;
        justify-self: center;

        background-color: rgba(0, 0, 0, 0.4);
        backdrop-filter: blur(8px);
    }
    #deletePopUp > form {
        border-radius: 8px;
        background-color: rgba(255, 255, 255, 0.875);
        backdrop-filter: blur(16px) /*brightness(90%)*/;
        padding: 32px;
        width: 40%;
        height: 50%;
        box-shadow: 2px 4px 12px rgba(0, 0, 0, 0.8);
    }
    #deletePopUp > form > p {
        display: @understandTheDeletionInfoVisibility;
        color: red;
    }
</style>



@code {
    private bool globalData = false; // Param describing if data should be stored per windows user or globaly.
    private static string logText;
    private static int previuslyClickedTDListID = -1;

    private static string deleteTDListName = "";
    private static string deletePopUpVisibility = "none";

    private static string listsFolderPath = Lib.getUserAppDataRoamingDBTDLFolder() + @"lists\";
    public static string getListsFolderPath() { return listsFolderPath; }
    private static void log(string msg, MessageType type = MessageType.Info) { Lib.log(msg, type); }
    private static List<TDList> readLists() { return Lib.readLists(listsFolderPath); }

    private IAudioManager audioManager;
    private static IAudioPlayer player;

    protected override void OnInitialized()
    {
        Settings.readConfig();

        this.audioManager = AudioManager.Current;

        log("Home page initalized");
        localLog("Home page initalized");
    }
    protected override async Task OnInitializedAsync()
    {
        player = audioManager.CreatePlayer(await FileSystem.OpenAppPackageFileAsync("hover.mp3"));
        //player.Volume = 0.078125f;
        player.Volume = 0.125f;
    }

    private void playTDListHoverSound()
    {
        player.Stop();
        player.Play();
    }

    private static void deleteTDList(string name)
    {
        previuslyClickedTDListID = -1;

        deleteTDListName = name;
        deletePopUpVisibility = "flex";
    }
    private static void deleteTDListGoBack()
    {
        deletePopUpVisibility = "none";
    }
    private static bool understandTheDeletion;
    private static string understandTheDeletionInfoVisibility = "none";
    private static void deleteTDListProceed()
    {
        if (understandTheDeletion)
        {
            Directory.Delete(listsFolderPath + deleteTDListName, true);
            understandTheDeletionInfoVisibility = "none";
            understandTheDeletion = false;
            deleteTDListGoBack();
        }
        else
        {
            understandTheDeletionInfoVisibility = "initial";
        }
    }

    private void configChange(string name, bool favorite_state, bool pinned_state)
    {
        previuslyClickedTDListID = -1;

        log("Changing config of \"" + name + "\" ");
        localLog("Changing config of \"" + name + "\" ");

        Lib.TDListConfigJSON newJson = new Lib.TDListConfigJSON(favorite_state, pinned_state);

        string jsonString = JsonSerializer.Serialize(newJson);
        File.WriteAllText(listsFolderPath + name + @"\config.json", jsonString);
    }


    private static string TDListClassesGenerator(string description, bool favourite)
    {
        string classes = "TDList";
        if (description.Length > 72) classes += " TDListHoverable";
        if (favourite) classes += " favourite";
        return classes;
    }
    private static string isTDListHoverable(string description)
    {
        if (description != "") return "TDList TDListHoverable"; else return "TDList";
    }
    
    public static string generateStarFavouriteClasses(bool favourite)
    {
        if (favourite) { return "fa fa-star checked"; } else { return "fa fa-star"; }
    }
    public static string generateStarPinnedSrc(bool pinned)
    {
        if (pinned) { return "images/blue_pin.png"; } else { return "images/pin_black.png"; }
    }

    private static string createListElement(string name, int listID, string description = "")
    {
        log("Creating element: " + name);
        localLog("Creating element: " + name);

        //ListElement creation
        //descriptionsClasses.Add("description");
        //string a = descriptionsClasses[2];

        string result = "<div class=\"TDList";
        if (description != "")
        {
            result += " TDListHoverable";
        }
        result += "\" @onclick=\"() => TDListClick(" + listID + ")\">";

        result += "<h2>" + name + "</h2>";
        result += "<h4 class=\"description\">" + description + "</h4>";
        //result += "<h4 class=\"@descriptionsClasses[" + listID + "]\">" + description + "</h4>";
        //log(descriptionsClasses[0]);

        //result += "<style>.TDList" + listsNumber + ":hover .TDListDesc" + listsNumber + " {display: block;}</style></div>";
        result += "</div>";
        return result;
    }

    public void TDListClick(int id, string path)
    {
        log("previuslyClickedTDListID: " + previuslyClickedTDListID + ", Current Cliecked id: " + id);
        localLog("previuslyClickedTDListID: " + previuslyClickedTDListID + ", Current Cliecked id: " + id);
        if (previuslyClickedTDListID == id)
        {
            // Open the list.
            log("Opening TDList with path: " + path);
            localLog("Opening TDList with path: " + path);
            NavManager.NavigateTo("/" + path);
        }
        else
        {
            // Show detail about the list.
            previuslyClickedTDListID = id;
        }
    }
    
    public static void localLog(string msg, MessageType type = MessageType.Info, bool save = true)
    {
        // Modify log msg to include time and message type
        string temporal = "[" + DateTime.Now + "] ";
        switch (type)
        {
            case MessageType.Info:
            case MessageType.I:
                temporal += "INFO";
                break;
            case MessageType.Error:
            case MessageType.E:
                temporal += "ERROR";
                break;
            case MessageType.Warning:
            case MessageType.W:
                temporal += "WARNING";
                break;
        }
        temporal += ":\t";
        msg = temporal + msg;

        // Add msg to logText
        logText += msg + "\n";

        if (save == true)
        {
            try
            {
                //Pass the filepath and filename to the StreamWriter Constructor
                StreamWriter sw = new StreamWriter(listsFolderPath + "localLog.txt");

                //Write text to file
                sw.Write(logText);

                //Close the file
                sw.Close();
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception: " + e.Message);
            }
        }
    }
}
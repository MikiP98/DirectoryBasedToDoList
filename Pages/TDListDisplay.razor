@page "/{path}"
@inject NavigationManager NavigationManager

@using MessageType = Lib.MessageType;

<h1>TDList</h1>

<div id="categories">
    @foreach (Category category in @readCategories())
    {
        <div class="category @category.color" @onpointerup="() => {log(clickedTDListName);}">
            <h2>@category.name</h2>
            <div class="TDLists">
                @foreach (Lib.TDList TDList in @category.lists)
                {
                    <div class="TDList" @onpointerdown="() => {clickedTDListName = TDList.name;}">
                        <h3>@TDList.name</h3>
                        <h2>description</h2>
                    </div>
                }
                <div id="addTDList" class="TDList">
                    <icon class="oi oi-plus"></icon>
                </div>
            </div>
        </div>
    }
    <div id="addCategory" class="category green" @onclick="addCategory">
        <icon class = "oi oi-plus"></icon>
    </div>
    <div id="blankCategory" class="category white" @onclick="addCategory">
        <h2>Name</h2>
        <br />
        <br />
        <br />
        <br />
        <button>Cancel</button>
        <button>Save</button>
    </div>
</div>

<style>
    #categories {
        /*
        display: flex;
        flex-direction: row;
        justify-content: space-around;
        align-items: stretch;
        */
        display: grid;
        grid-auto-flow: column;
        column-gap: 24px;
        grid-auto-columns: 1fr;
        
        height: 52vh;

        border: 4px solid green;
    }
    
    .category {
        display: flex;
        flex-direction: column;
        align-items: stretch;
        
        border-radius: 14px;

        filter: opacity(50%);
        backdrop-filter: blur(10px);
        
        max-width: 25vw;

        --primaryColor: white;
        background-color: var(--primaryColor);
        border: 4px solid calc(var(--primaryColor) * 0.9);
    }

    #addCategory {
        max-width: calc(200px + 5vw + 5vh);
        
        justify-content: center;
        align-items: center;

        display: @addCategoryDisplay;
    }
    #addCategory > icon {
        font-size: calc(24px + 1vw + 1vh);
        
        filter: opacity(60%);
        
        backdrop-filter: blur(5px);
    }
    
    #blankCategory {
        display: @blankCategoryDisplay;
    }

    
    /* Colors: */
    .white {
        background-color: white;
        border: 4px solid calc(white * 0.9);
    }
    .red {
        background-color: red;
        border: 4px solid calc(red * 0.9);
    }
    .orange {
        background-color: orange;
        border: 4px solid calc(orange * 0.9);
    }
    .yellow {
        background-color: yellow;
        border: 4px solid calc(orange * 0.9);
    }
    .green {
        --primaryColor: green;
    }
    .blue {
        --primaryColor: blue;
    }
    .purple {
        --primaryColor: purple;
    }
    .black {
        --primaryColor: black;
    }

    
    .TDList {
        border: 4px solid red;
        border-radius: 12px;

        margin: 4px;
        padding: 4px;
    }

    .TDList > h2 {
        display: none;

        font-size: 1.2em;
    }
    .TDList:hover h2 {
        display: block;
    }
</style>

@code {
    [Parameter]
    public string Path { get; set; } = "";

    static string userAppDataRoamingDBTDLFolder = Lib.getUserAppDataRoamingDBTDLFolder();
    static void log(string msg, MessageType type = MessageType.Info) { Lib.log(msg, type); }

    private static string TDListPath;

    private static string logText = "";
    private static string clickedTDListName = "";

    private static string addCategoryDisplay = "flex";
    private static string blankCategoryDisplay = "none";

    protected override void OnInitialized()
    {
        TDListPath = userAppDataRoamingDBTDLFolder + @"lists\" + Path;
        //log("TDList file path: " + Path);
    }

    private static void addCategory()
    {
        addCategoryDisplay = "none";
        blankCategoryDisplay = "flex";
    }

    private static void addTDList()
    {
        
    }

    private static List<Category> readCategories()
    {
        List<Category> categories = new List<Category>();

        DirectoryInfo TDListFolder = new DirectoryInfo(TDListPath);
        try
        {
            // Indicate that the directory exists.
            log("TDList: \"" + TDListFolder.FullName + "\" has been found.");

            // Check for any folders (categories)
            foreach (DirectoryInfo category in TDListFolder.GetDirectories())
            {
                log("Found: " + category.Name + " (category) folder");

                List<Lib.TDList> TDLists = Lib.readLists(category.FullName); // Zmienić funkcje aby przyjmowała directory zamiast ścieżki?
                //List<Lib.TDList> TDLists = new List<Lib.TDList>();
                //foreach (DirectoryInfo TDList in category.GetDirectories())
                //{
                //    log("Found: " + TDList.Name + " (TDList) folder");

                //    TDLists.Add(new Lib.TDList(TDList.Name, "", 0));
                //}

                categories.Add(new Category(category.Name, "white", TDLists));
            }
        }
        catch (Exception e)
        {
            log("The process failed: " + e, MessageType.E);
        }

        return categories;
    }

    struct Category
    {
        public string name;
        public string color;
        public List<Lib.TDList> lists;

        public Category(string name, string color, List<Lib.TDList> lists)
        {
            this.name = name;
            this.color = color;
            this.lists = lists;
        }
    }

    public static void localLog(string msg, MessageType type = MessageType.Info, bool save = true)
    {
        // Modify log msg to include time and message type
        string temporal = "[" + DateTime.Now + "] ";
        switch (type)
        {
            case MessageType.Info:
            case MessageType.I:
                temporal += "INFO";
                break;
            case MessageType.Error:
            case MessageType.E:
                temporal += "ERROR";
                break;
            case MessageType.Warning:
            case MessageType.W:
                temporal += "WARNING";
                break;
        }
        temporal += ":\t";
        msg = temporal + msg;

        // Add msg to logText
        logText += msg + "\n";

        if (save == true)
        {
            try
            {
                //Pass the filepath and filename to the StreamWriter Constructor
                StreamWriter sw = new StreamWriter(TDListPath + @"\localLog.txt");

                //Write text to file
                sw.Write(logText);

                //Close the file
                sw.Close();
            }
            catch (Exception e)
            {
                Console.WriteLine("Exception: " + e.Message);
            }
        }
    }
}
